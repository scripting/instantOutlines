<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Fri, 02 Jul 2021 13:32:45 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: ioServer</title>
		<dateCreated>Sat, 18 Jan 2020 17:41:13 GMT</dateCreated>
		<dateModified>Fri, 02 Jul 2021 13:32:45 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 4, 18, 58, 59, 64, 66, 78</expansionState>
		<vertScrollState>32</vertScrollState>
		<windowTop>106</windowTop>
		<windowLeft>162</windowLeft>
		<windowBottom>1181</windowBottom>
		<windowRight>1569</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/ioserver/">
			<outline text="notes" isComment="true">
				<outline text="create database instantoutlinebase;"/>
				<outline text="create table links (">
					<outline text="id varchar (32),"/>
					<outline text="url varchar (512),"/>
					<outline text="ct int,"/>
					<outline text="whenCreated datetime,"/>
					<outline text="title text,"/>
					<outline text="description text,"/>
					<outline text="socketserver varchar (512)," created="Sat, 26 Jun 2021 18:16:30 GMT"/>
					<outline text="primary key (id)"/>
					<outline text=");"/>
					</outline>
				<outline text="test urls" created="Sat, 26 Jun 2021 18:00:39 GMT">
					<outline text="http://localhost:1240/pc" created="Sat, 26 Jun 2021 18:00:41 GMT"/>
					<outline text="http://localhost:1240/pc?format=data" created="Sat, 26 Jun 2021 18:02:56 GMT"/>
					<outline text="http://localhost:1240/createglue?url=http://test.com/&amp;title=gutworthy&amp;description=someoutline&amp;socketserver=yoursocket" created="Sat, 26 Jun 2021 18:03:23 GMT"/>
					</outline>
				<outline text="" created="Thu, 01 Jul 2021 16:09:10 GMT"/>
				<outline text="how to start over" created="Thu, 01 Jul 2021 16:09:11 GMT">
					<outline text="copy map.json from the live server" created="Thu, 01 Jul 2021 16:09:14 GMT"/>
					<outline text="drop table links;" created="Thu, 01 Jul 2021 16:09:48 GMT"/>
					<outline text="create table links...." created="Thu, 01 Jul 2021 16:09:53 GMT"/>
					<outline text="in ioserver.js uncomment call to populateDatabase ();" created="Thu, 01 Jul 2021 16:10:01 GMT"/>
					<outline text="launch ioserver.js" created="Thu, 01 Jul 2021 16:10:37 GMT"/>
					<outline text="wait for it to complete populating the database" created="Thu, 01 Jul 2021 16:10:44 GMT"/>
					<outline text="quit the app" created="Thu, 01 Jul 2021 16:11:12 GMT"/>
					<outline text="comment call to populateDatabase ();" created="Thu, 01 Jul 2021 16:11:17 GMT"/>
					<outline text="launch ioserver.js" created="Thu, 01 Jul 2021 16:11:22 GMT"/>
					<outline text="test" created="Thu, 01 Jul 2021 16:11:33 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;ioServer&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Server side of the instant outline reader.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.6.0&quot;,"/>
					<outline text="&quot;scripts&quot;: {">
						<outline text="&quot;start&quot;: &quot;node glue.js&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davesql&quot;: &quot;*&quot;,"/>
						<outline text="&quot;opmltojs&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: {">
						<outline text="&quot;node&quot;: &quot;0.10.*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="ioserver.js">
				<outline text="var myVersion = &quot;0.6.0&quot;, myProductName = &quot;ioServer&quot;; " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;); "/>
				<outline text="const opmlToJs = require (&quot;opmltojs&quot;);"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;); "/>
				<outline text="const davesql = require (&quot;davesql&quot;);"/>
				<outline text=""/>
				<outline text="var config = {">
					<outline text="port: 1240,"/>
					<outline text="flLogToConsole: true,"/>
					<outline text="flAllowAccessFromAnywhere: true, "/>
					<outline text="rootDomain: &quot;instantoutliner.com&quot;,"/>
					<outline text="createPath: undefined, //the path you use to create a new short URL, must be specified in config.json"/>
					<outline text="urlOutlineTemplate: &quot;http://scripting.com/code/ioreader/index.html&quot;,"/>
					<outline text="urlServerHomePageSource: &quot;http://scripting.com/code/ioreader/homepage/index.html&quot;"/>
					<outline text="};"/>
					</outline>
				<outline text="const fnameConfig = &quot;config.json&quot;;"/>
				<outline text=""/>
				<outline text="var stats = {">
					<outline text="whenFirstStart: new Date (), "/>
					<outline text="ctStarts: 0,"/>
					<outline text="whenLastStart: undefined,"/>
					<outline text="ctWrites: 0,"/>
					<outline text=""/>
					<outline text="ctHits: 0, "/>
					<outline text="ctHitsToday: 0, "/>
					<outline text="ctHitsThisRun:0, "/>
					<outline text="whenLastHit: new Date (0),"/>
					<outline text=""/>
					<outline text="nextstring: &quot;0&quot;"/>
					<outline text="outlineMap: {}" isComment="true"/>
					<outline text="};"/>
					</outline>
				<outline text="const fnameStats = &quot;stats.json&quot;;"/>
				<outline text="var flStatsChanged = false;"/>
				<outline text=""/>
				<outline text="var outlineMap = new Object ();  //10/1/20 by DW -- pulled out of stats"/>
				<outline text="const fnameOutlinemap = &quot;map.json&quot;;"/>
				<outline text="var flOutlineMapChanged = false;"/>
				<outline text="" created="Fri, 25 Jun 2021 20:40:50 GMT"/>
				<outline text="" created="Fri, 25 Jun 2021 20:40:50 GMT"/>
				<outline text="function populateDatabase () { //6/25/21 by DW" created="Fri, 25 Jun 2021 20:40:50 GMT">
					<outline text="let ctlinks = 0;" created="Fri, 25 Jun 2021 21:17:52 GMT"/>
					<outline text="for (var x in outlineMap) {" created="Fri, 25 Jun 2021 20:41:27 GMT">
						<outline text="let item = outlineMap [x];" created="Fri, 25 Jun 2021 20:45:20 GMT"/>
						<outline text="let theLink = {" created="Fri, 25 Jun 2021 20:44:19 GMT">
							<outline text="id: x," created="Fri, 25 Jun 2021 20:44:38 GMT"/>
							<outline text="url: item.url," created="Fri, 25 Jun 2021 20:45:37 GMT"/>
							<outline text="ct: item.ct," created="Fri, 25 Jun 2021 20:45:41 GMT"/>
							<outline text="whenCreated: new Date (item.when)," created="Fri, 25 Jun 2021 20:45:50 GMT"/>
							<outline text="title: item.title," created="Fri, 25 Jun 2021 20:45:57 GMT"/>
							<outline text="socketserver: item.socketserver," created="Sat, 26 Jun 2021 18:17:18 GMT"/>
							<outline text="description: item.description" created="Fri, 25 Jun 2021 20:46:13 GMT"/>
							<outline text="}" created="Fri, 25 Jun 2021 20:46:53 GMT"/>
							</outline>
						<outline text="let sqltext = &quot;replace into links &quot; + davesql.encodeValues (theLink);"/>
						<outline text="davesql.queueQuery (sqltext, function (err, result) {">
							<outline text="if (err) {">
								<outline text="console.log (err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="console.log (ctlinks++ + &quot;: &quot; + utils.jsonStringify (theLink));"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}" created="Fri, 25 Jun 2021 20:41:33 GMT"/>
						</outline>
					<outline text="}" created="Fri, 25 Jun 2021 20:41:09 GMT"/>
					</outline>
				<outline text="function findLinkInDatabase (theLink, callback) { //6/25/21 by DW" created="Fri, 25 Jun 2021 21:42:14 GMT">
					<outline text="var sqltext = &quot;select * from links where url = &quot; + davesql.encode (theLink) + &quot;;&quot;;" created="Fri, 25 Jun 2021 21:42:43 GMT"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {" created="Fri, 25 Jun 2021 21:45:18 GMT">
							<outline text="callback (err);" created="Fri, 25 Jun 2021 21:46:21 GMT"/>
							<outline text="}" created="Fri, 25 Jun 2021 21:46:24 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 25 Jun 2021 21:46:25 GMT">
							<outline text="if (result.length == 0) {" created="Fri, 25 Jun 2021 21:45:19 GMT">
								<outline text="callback (undefined, undefined);" created="Fri, 25 Jun 2021 21:45:32 GMT"/>
								<outline text="}" created="Fri, 25 Jun 2021 21:45:28 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 25 Jun 2021 21:45:29 GMT">
								<outline text="callback (undefined, result [0]);" created="Fri, 25 Jun 2021 21:45:32 GMT"/>
								<outline text="}" created="Fri, 25 Jun 2021 21:45:46 GMT"/>
								</outline>
							<outline text="}" created="Fri, 25 Jun 2021 21:46:27 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Fri, 25 Jun 2021 21:42:33 GMT"/>
					</outline>
				<outline text="function findInDatabase (id, callback) {" created="Fri, 25 Jun 2021 22:02:23 GMT">
					<outline text="var sqltext = &quot;select * from links where id = &quot; + davesql.encode (id) + &quot;;&quot;;" created="Fri, 25 Jun 2021 21:42:43 GMT"/>
					<outline text="davesql.runSqltext (sqltext, function (err, result) {">
						<outline text="if (err) {" created="Fri, 25 Jun 2021 21:45:18 GMT">
							<outline text="callback (err);" created="Fri, 25 Jun 2021 21:46:21 GMT"/>
							<outline text="}" created="Fri, 25 Jun 2021 21:46:24 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 25 Jun 2021 21:46:25 GMT">
							<outline text="if (result.length == 0) {" created="Fri, 25 Jun 2021 21:45:19 GMT">
								<outline text="callback (undefined, undefined);" created="Fri, 25 Jun 2021 21:45:32 GMT"/>
								<outline text="}" created="Fri, 25 Jun 2021 21:45:28 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 25 Jun 2021 21:45:29 GMT">
								<outline text="callback (undefined, result [0]);" created="Fri, 25 Jun 2021 21:45:32 GMT"/>
								<outline text="}" created="Fri, 25 Jun 2021 21:45:46 GMT"/>
								</outline>
							<outline text="}" created="Fri, 25 Jun 2021 21:46:27 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Fri, 25 Jun 2021 22:02:30 GMT"/>
					</outline>
				<outline text="function addLinkToDatabase (theLink, callback) { //6/25/21 by DW" created="Fri, 25 Jun 2021 21:58:47 GMT">
					<outline text="let sqltext = &quot;replace into links &quot; + davesql.encodeValues (theLink);"/>
					<outline text="davesql.runSqltext (sqltext, callback);"/>
					<outline text="}" created="Fri, 25 Jun 2021 21:59:02 GMT"/>
					</outline>
				<outline text="" created="Fri, 25 Jun 2021 21:42:14 GMT"/>
				<outline text="function statsChanged () {">
					<outline text="flStatsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function outlinemapChanged () {">
					<outline text="flOutlineMapChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function findSubOutline (theOutline, permalink) {">
					<outline text="var theSub = undefined;"/>
					<outline text="console.log (&quot;findSubOutline: permalink == &quot; + permalink);" isComment="true"/>
					<outline text="function lookin (subs) {">
						<outline text="subs.forEach (function (sub) {">
							<outline text="console.log (&quot;findSubOutline: sub.text == &quot; + sub.text + &quot;, sub.created == &quot; + sub.created + &quot;, permalink == &quot; + utils.getPermalinkString (sub.created));" isComment="true"/>
							<outline text="if (theSub === undefined) {">
								<outline text="if (utils.getPermalinkString (sub.created) == permalink) {">
									<outline text="theSub = sub;"/>
									<outline text="return;"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (sub.subs !== undefined) {">
										<outline text="lookin (sub.subs)"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="lookin (theOutline.opml.body.subs);"/>
					<outline text="return (theSub);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getSubOutline (urlOpml, permalink, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="2/9/20; 11:13:44 AM by DW">
							<outline text="We return the opml text for the suboutline indicated by the url and permalink."/>
							</outline>
						</outline>
					<outline text="request (urlOpml, function (err, response, opmltext) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (response.statusCode != 200) {">
								<outline text="callback ({message: &quot;Error reading the OPML file, code == &quot; + response.statusCode + &quot;.&quot;});"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="opmlToJs.parse (opmltext, function (theOutline) {">
									<outline text="if (err) {">
										<outline text="callback (err);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="var theSubOutline = findSubOutline (theOutline, permalink);"/>
										<outline text="if (theSubOutline === undefined) {">
											<outline text="var err = {">
												<outline text="message: &quot;Can't find the suboutline because there is no item with the permalink provided.&quot;"/>
												<outline text="};"/>
												</outline>
											<outline text="callback (err);"/>
											<outline text="}"/>
											</outline>
										<outline text="else {">
											<outline text="theOutline.opml.body.subs = [">
												<outline text="theSubOutline"/>
												<outline text="];"/>
												</outline>
											<outline text="theOutline.opml.head.title = theSubOutline.text;"/>
											<outline text="theOutline.opml.head.expansionState = 1;"/>
											<outline text="theOutline.opml.head.lastCursor = 0;"/>
											<outline text="theOutline.opml.head.generator = myProductName + &quot; v&quot; + myVersion;"/>
											<outline text="console.log (&quot;getSubOutline: theOutline == &quot; + utils.jsonStringify (theOutline));" isComment="true"/>
											<outline text="var opmltext = opmlToJs.opmlify (theOutline);"/>
											<outline text="callback (undefined, opmltext);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function handleHttpRequest (theRequest) {">
					<outline text="var params = theRequest.params, now = new Date ();"/>
					<outline text="//stats">
						<outline text="if (!utils.sameDay (now, stats.whenLastHit)) { //day rollover">
							<outline text="stats.ctHitsToday = 0;"/>
							<outline text="}"/>
							</outline>
						<outline text="stats.ctHits++;"/>
						<outline text="stats.ctHitsToday++;"/>
						<outline text="stats.ctHitsThisRun++;"/>
						<outline text="stats.whenLastHit = now;"/>
						<outline text="statsChanged ();"/>
						</outline>
					<outline text="function returnHtml (htmltext) {">
						<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, htmltext);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnPlainText (s) {">
						<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, s.toString ());"/>
						<outline text="}"/>
						</outline>
					<outline text="function return404 () {">
						<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnRedirect (url, code) { //9/30/20 by DW">
						<outline text="var headers = {">
							<outline text="location: url"/>
							<outline text="};"/>
							</outline>
						<outline text="if (code === undefined) {">
							<outline text="code = 302;"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (code, &quot;text/plain&quot;, code + &quot; REDIRECT&quot;, headers);"/>
						<outline text="}"/>
						<outline text=""/>
						</outline>
					<outline text="function returnData (jstruct) {">
						<outline text="if (jstruct === undefined) {">
							<outline text="jstruct = {};"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function returnError (jstruct) {">
						<outline text="theRequest.httpReturn (500, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
						<outline text="}"/>
						</outline>
					<outline text="function httpReturn (err, jstruct) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="returnData (jstruct);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function httpReturnString (err, s) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="returnPlainText (s);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function httpReturnOpmlText (err, opmltext) {">
						<outline text="if (err) {">
							<outline text="returnError (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="theRequest.httpReturn (200, &quot;text/xml&quot;, opmltext.toString ());"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function returnUrlContents (urlTemplate, pagetable, callback) {">
						<outline text="request (urlTemplate, function (error, response, templatetext) {">
							<outline text="if (!error &amp;&amp; response.statusCode == 200) {">
								<outline text="var pagetext = utils.multipleReplaceAll (templatetext, pagetable, false, &quot;[%&quot;, &quot;%]&quot;);"/>
								<outline text="returnHtml (pagetext);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function returnServerHomePage () {">
						<outline text="var pagetable = {">
							<outline text="rootDomain: config.rootDomain,"/>
							<outline text="version: myVersion"/>
							<outline text="};"/>
							</outline>
						<outline text="returnUrlContents (config.urlServerHomePageSource, pagetable);"/>
						<outline text="}"/>
						</outline>
					<outline text="function createOutlinePage (urlOpml, title, description, socketserver, callback) {">
						<outline text="findLinkInDatabase (urlOpml, function (err, item) {" created="Fri, 25 Jun 2021 21:49:23 GMT">
							<outline text="if (err) {" created="Fri, 25 Jun 2021 21:53:21 GMT">
								<outline text="callback (err.message); " created="Fri, 25 Jun 2021 21:53:25 GMT"/>
								<outline text="}" created="Fri, 25 Jun 2021 21:53:37 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 25 Jun 2021 21:53:39 GMT">
								<outline text="if (item === undefined) { //it's a new link">
									<outline text="item = {">
										<outline text="id: stats.nextstring," created="Fri, 25 Jun 2021 21:56:31 GMT"/>
										<outline text="url: urlOpml,"/>
										<outline text="ct: 0,"/>
										<outline text="whenCreated: new Date (),"/>
										<outline text="title,"/>
										<outline text="description,"/>
										<outline text="socketserver"/>
										<outline text="};"/>
										</outline>
									<outline text="stats.nextstring = utils.bumpUrlString (stats.nextstring);"/>
									<outline text="statsChanged ();"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (title !== undefined) {">
										<outline text="item.title = title;"/>
										<outline text="}"/>
										</outline>
									<outline text="if (description !== undefined) {">
										<outline text="item.description = description;"/>
										<outline text="}"/>
										</outline>
									<outline text="if (socketserver !== undefined) {">
										<outline text="item.socketserver = socketserver;"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="addLinkToDatabase (item);" created="Fri, 25 Jun 2021 21:53:21 GMT"/>
								<outline text="callback (undefined, &quot;http://&quot; + config.rootDomain + &quot;/&quot; + item.id);"/>
								<outline text="}" created="Fri, 25 Jun 2021 21:53:41 GMT"/>
								</outline>
							<outline text="});" created="Fri, 25 Jun 2021 21:49:51 GMT"/>
							</outline>
						<outline text="" isComment="true" created="Fri, 25 Jun 2021 21:49:23 GMT"/>
						<outline text="function findInOutlineMap (longUrl, callback) {" isComment="true">
							<outline text="for (var x in outlineMap) {">
								<outline text="var item = outlineMap [x];"/>
								<outline text="if (item.url == longUrl) {">
									<outline text="callback (item, x);"/>
									<outline text="return;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="callback (undefined);"/>
							<outline text="}"/>
							</outline>
						<outline text="findInOutlineMap (urlOpml, function (item, key) {" isComment="true">
							<outline text="if (item !== undefined) {">
								<outline text="if (title !== undefined) {">
									<outline text="item.title = title;"/>
									<outline text="}"/>
									</outline>
								<outline text="if (description !== undefined) {">
									<outline text="item.description = description;"/>
									<outline text="}"/>
									</outline>
								<outline text="if (socketserver !== undefined) {">
									<outline text="item.socketserver = socketserver;"/>
									<outline text="}"/>
									</outline>
								<outline text="statsChanged ();"/>
								<outline text="callback (undefined, &quot;http://&quot; + config.rootDomain + &quot;/&quot; + key);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="var thisString = stats.nextstring;"/>
								<outline text="var jstruct = {">
									<outline text="url: urlOpml,"/>
									<outline text="ct: 0,"/>
									<outline text="when: new Date (),"/>
									<outline text="title,"/>
									<outline text="description,"/>
									<outline text="socketserver"/>
									<outline text="};"/>
									</outline>
								<outline text="if (title != undefined) {" isComment="true">
									<outline text="jstruct.title = title;"/>
									<outline text="}"/>
									</outline>
								<outline text="if (description != undefined) {" isComment="true">
									<outline text="jstruct.description = description;"/>
									<outline text="}"/>
									</outline>
								<outline text="if (socketserver != undefined) {" isComment="true">
									<outline text="jstruct.socketserver = socketserver;"/>
									<outline text="}"/>
									</outline>
								<outline text="console.log (&quot;createOutlinePage: jstruct == &quot; + utils.jsonStringify (jstruct));"/>
								<outline text="outlineMap [thisString] = jstruct;"/>
								<outline text="stats.nextstring = utils.bumpUrlString (thisString);"/>
								<outline text="statsChanged ();"/>
								<outline text="outlinemapChanged ();"/>
								<outline text="callback (undefined, &quot;http://&quot; + config.rootDomain + &quot;/&quot; + thisString);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function returnOutlinePage (id, permalink, flReturnData) {">
						<outline text="Changes" isComment="true">
							<outline text="9/30/20; 12:17:25 PM by DW">
								<outline text="LO2 becomes its own reader app. ">
									<outline text="Instead of returning a reader outline, we redirect to LO2, to display the outline. "/>
									<outline text="We had the idea of a permalink into the outline, that feature is not preserved, but it could be passed to LO2 as a param, and the code could be moved there. "/>
									</outline>
								</outline>
							</outline>
						<outline text="id = utils.stringDelete (id, 1, 1); //drop the / at the beginning"/>
						<outline text="findInDatabase (id, function (err, item) {" created="Fri, 25 Jun 2021 21:49:23 GMT">
							<outline text="if (err || (item == undefined)) {" created="Fri, 25 Jun 2021 21:53:21 GMT">
								<outline text="return404 ();"/>
								<outline text="}" created="Fri, 25 Jun 2021 21:53:37 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 25 Jun 2021 21:53:39 GMT">
								<outline text="if (flReturnData) {">
									<outline text="returnData (item);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="returnRedirect (&quot;http://littleoutliner.com?url=http://instantoutliner.com/&quot; + id); //9/30/20 by DW"/>
									<outline text="" isComment="true"/>
									<outline text="var jstructcopy = new Object ();" isComment="true"/>
									<outline text="utils.copyScalars (jstruct, jstructcopy);" isComment="true"/>
									<outline text="if (permalink !== undefined) { //2/9/20 by DW" isComment="true">
										<outline text="jstructcopy.url = &quot;/getsuboutline?permalink=&quot; + permalink + &quot;&amp;url=&quot; + jstruct.url; //call back to this server to get the suboutline"/>
										<outline text="jstructcopy.url = &quot;http://localhost:1240/getsuboutline?permalink=&quot; + permalink + &quot;&amp;url=&quot; + jstruct.url;" isComment="true"/>
										<outline text="}"/>
										</outline>
									<outline text="returnUrlContents (config.urlOutlineTemplate, jstructcopy);" isComment="true"/>
									<outline text="}"/>
									</outline>
								<outline text="item.ct++;"/>
								<outline text="addLinkToDatabase (item);" created="Fri, 25 Jun 2021 21:53:21 GMT"/>
								<outline text="}" created="Fri, 25 Jun 2021 21:53:41 GMT"/>
								</outline>
							<outline text="});" created="Fri, 25 Jun 2021 21:49:51 GMT"/>
							</outline>
						<outline text="" isComment="true" created="Fri, 25 Jun 2021 22:01:05 GMT"/>
						<outline text="" isComment="true" created="Fri, 25 Jun 2021 22:01:05 GMT"/>
						<outline text="var jstruct = outlineMap [path];" isComment="true"/>
						<outline text="if (jstruct === undefined) {" isComment="true">
							<outline text="return404 ();"/>
							<outline text="}"/>
							</outline>
						<outline text="else {" isComment="true">
							<outline text="jstruct.ct++;"/>
							<outline text="statsChanged ();"/>
							<outline text="if (flReturnData) {">
								<outline text="returnData (jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="returnRedirect (&quot;http://littleoutliner.com?url=http://instantoutliner.com/&quot; + path); //9/30/20 by DW"/>
								<outline text="" isComment="true"/>
								<outline text="var jstructcopy = new Object ();" isComment="true"/>
								<outline text="utils.copyScalars (jstruct, jstructcopy);" isComment="true"/>
								<outline text="if (permalink !== undefined) { //2/9/20 by DW" isComment="true">
									<outline text="jstructcopy.url = &quot;/getsuboutline?permalink=&quot; + permalink + &quot;&amp;url=&quot; + jstruct.url; //call back to this server to get the suboutline"/>
									<outline text="jstructcopy.url = &quot;http://localhost:1240/getsuboutline?permalink=&quot; + permalink + &quot;&amp;url=&quot; + jstruct.url;" isComment="true"/>
									<outline text="}"/>
									</outline>
								<outline text="returnUrlContents (config.urlOutlineTemplate, jstructcopy);" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="switch (theRequest.lowerpath) {">
						<outline text="case &quot;/&quot;:">
							<outline text="returnServerHomePage ();"/>
							<outline text="break;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/version&quot;:" created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265">
							<outline text="returnPlainText (myVersion);    "/>
							<outline text="break;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/now&quot;: " created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265">
							<outline text="returnPlainText (now.toString ());    "/>
							<outline text="break;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/status&quot;: " created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265">
							<outline text="returnData (stats);"/>
							<outline text="break;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case &quot;/getsuboutline&quot;:">
							<outline text="getSubOutline (params.url, params.permalink, httpReturnOpmlText);"/>
							<outline text="break;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
							</outline>
						<outline text="case config.createPath:">
							<outline text="if (params.url === undefined) {">
								<outline text="returnError ({message: &quot;Can't create the short url because the \&quot;url\&quot; parameter is not specified.&quot;});"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="createOutlinePage (params.url, params.title, params.description, params.socketserver, httpReturnString);"/>
								<outline text="}"/>
								</outline>
							<outline text="break;"/>
							</outline>
						<outline text="default:">
							<outline text="var fldata = (params.format === undefined) ? false : params.format == &quot;data&quot;;"/>
							<outline text="returnOutlinePage (theRequest.path, params.permalink, fldata);"/>
							<outline text="break;"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function readConfig (callback) {">
					<outline text="utils.sureFilePath (fnameConfig, function () {">
						<outline text="fs.readFile (fnameConfig, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="for (var x in jstruct) {">
										<outline text="config [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readConfig: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readStats (callback) {">
					<outline text="utils.sureFilePath (fnameStats, function () {">
						<outline text="fs.readFile (fnameStats, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (data.toString ());"/>
									<outline text="for (var x in jstruct) {">
										<outline text="stats [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readConfig: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function readOutlinemap (callback) {">
					<outline text="utils.sureFilePath (fnameOutlinemap, function () {">
						<outline text="fs.readFile (fnameOutlinemap, function (err, data) {">
							<outline text="if (!err) {">
								<outline text="try {">
									<outline text="outlineMap = JSON.parse (data.toString ());"/>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readOutlinemap: err == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everyMinute () {">
					<outline text="var now = new Date ();"/>
					<outline text="if (now.getMinutes () == 0) {">
						<outline text="console.log (&quot;\n&quot; + myProductName + &quot;: &quot; + now.toLocaleTimeString () + &quot;, v&quot; + myVersion + &quot;, &quot; + stats.ctHitsThisRun + &quot; hits&quot;);"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function everySecond () {">
					<outline text="if (flStatsChanged) {">
						<outline text="flStatsChanged = false;"/>
						<outline text="stats.ctWrites++;"/>
						<outline text="fs.writeFile (fnameStats, utils.jsonStringify (stats), function (err) {">
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (flOutlineMapChanged) {">
						<outline text="flOutlineMapChanged = false;"/>
						<outline text="fs.writeFile (fnameOutlinemap, utils.jsonStringify (outlineMap), function (err) {">
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="readOutlinemap (function () {">
					<outline text="readStats (function () {">
						<outline text="stats.ctStarts++;"/>
						<outline text="stats.ctHitsThisRun = 0;"/>
						<outline text="stats.whenLastStart = new Date ();"/>
						<outline text="statsChanged ();"/>
						<outline text="readConfig (function () {">
							<outline text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot; running on port &quot; + config.port + &quot;.\n&quot;);"/>
							<outline text="davesql.start (config.database, function () { //6/25/21 by DW">
								<outline text="populateDatabase ();" isComment="true" created="Fri, 25 Jun 2021 20:49:06 GMT"/>
								<outline text="davehttp.start (config, handleHttpRequest);"/>
								<outline text="setInterval (everySecond, 1000); "/>
								<outline text="setInterval (everyMinute, 60000); "/>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="config.json" isComment="true">
				<outline text="{">
					<outline text="&quot;myPort&quot;: 1240,"/>
					<outline text="&quot;rootDomain&quot;: &quot;instantoutliner.com&quot;,"/>
					<outline text="&quot;urlHomePage&quot;: &quot;http://1999.io/testing/electron/outliner/listener/listener.html&quot;,"/>
					<outline text="&quot;createPath&quot;: &quot;/createglue&quot;"/>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="readme.md">
				<outline text="# ioServer">
					<outline text="The server that connects all instant outlines to editors and readers."/>
					</outline>
				<outline text="### Background">
					<outline text="The ioServer app has been around in one form or another for about 15 years. "/>
					<outline text="I started taking notes here on 9/30/2020."/>
					</outline>
				<outline text="### Notes">
					<outline text="6/25/21; 4:33:23 PM by DW" created="Fri, 25 Jun 2021 20:33:22 GMT">
						<outline text="The map is going in a MySQL database." created="Fri, 25 Jun 2021 20:33:23 GMT"/>
						</outline>
					<outline text="9/30/20; 11:55:10 AM by DW">
						<outline text="The outline map, that associates an instant outline url with an outline, is in the stats struct. ">
							<outline text="It should at least be in its own file, if not in a sql database. "/>
							</outline>
						<outline text="Instead of serving an outline, we redirect to littleoutliner.com. "/>
						<outline text="I'm doing a backup now, to preserve the previous version. It's also &lt;a href=&quot;https://github.com/scripting/ioServer&quot;&gt;on GitHub&lt;/a&gt;. "/>
						</outline>
					</outline>
				</outline>
			<outline text="lib/utils.js" isComment="true">
				<outline text="var fs = require (&quot;fs&quot;);"/>
				<outline text=""/>
				<outline text="exports.beginsWith = beginsWith; "/>
				<outline text="exports.endsWith = endsWith;"/>
				<outline text="exports.stringCountFields = stringCountFields;"/>
				<outline text="exports.stringDelete = stringDelete;"/>
				<outline text="exports.stringMid = stringMid;"/>
				<outline text="exports.padWithZeros = padWithZeros;"/>
				<outline text="exports.getDatePath = getDatePath;"/>
				<outline text="exports.secondsSince = secondsSince;"/>
				<outline text="exports.bumpUrlString = bumpUrlString;"/>
				<outline text="exports.stringContains = stringContains;"/>
				<outline text="exports.sameDay = sameDay;"/>
				<outline text="exports.jsonStringify = jsonStringify;"/>
				<outline text="exports.stringNthField = stringNthField;"/>
				<outline text="exports.getBoolean = getBoolean;"/>
				<outline text="exports.isAlpha = isAlpha;"/>
				<outline text="exports.isNumeric = isNumeric;"/>
				<outline text="exports.stringLastField = stringLastField;"/>
				<outline text="exports.multipleReplaceAll = multipleReplaceAll;"/>
				<outline text="exports.replaceAll = replaceAll; //2/17/15 by DW"/>
				<outline text="exports.kilobyteString = kilobyteString;"/>
				<outline text="exports.megabyteString = megabyteString;"/>
				<outline text="exports.gigabyteString = gigabyteString;"/>
				<outline text="exports.stringLower = stringLower;"/>
				<outline text="exports.filledString = filledString;"/>
				<outline text="exports.innerCaseName = innerCaseName;"/>
				<outline text="exports.copyScalars = copyScalars;"/>
				<outline text="exports.stripMarkup = stripMarkup;"/>
				<outline text="exports.replaceAll = replaceAll;"/>
				<outline text="exports.hotUpText = hotUpText;"/>
				<outline text="exports.getFileModDate = getFileModDate; "/>
				<outline text="exports.getRandomPassword = getRandomPassword;"/>
				<outline text=""/>
				<outline text="[[http://fargo.io/code/node/shared/utils.js]]"/>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildIoServer ()"/>
			</outline>
		</body>
	</opml>
